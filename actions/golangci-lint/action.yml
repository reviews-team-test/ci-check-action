name: 'Golangci-Lint Check'
description: 'Golangci-Lint Check'
inputs:
  repo_name:
    description: 'repo name'
    required: false
    default: ${{ github.repository }}
  scandir:
    description: 'scan dir'
    required: false
    default: '.'

outputs:
  isFailed:
    description: 'isFailed'
    value: ${{ steps.get-check-flag.outputs.isFailed }}
  errNum:
    description: 'errNum'
    value: ${{ steps.get-check-flag.outputs.errNum }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-go@v5
      with:
        go-version: stable
    - name: Config Check
      shell: bash
      run: |
        if [ ! -f "${{inputs.scandir}}/go.mod" ]; then
          echo "go.mod 文件不存在, 创建go.mod文件"
          go mod init ${{ github.repository }}
          go mod tidy
        fi
        if [ ! -f "${{inputs.scandir}}/.golangci.yml" ]; then
          echo ".golangci.yml文件不存在, 创建.."
          cp $GITHUB_ACTION_PATH/golangci.yml .golangci.yml
        fi
    - uses: golangci/golangci-lint-action@v6
      with:
        working-directory: ${{inputs.scandir}}
        version: latest
        args: --timeout=30m --out-format=junit-xml | tee ../golangci-lint-report.xml
        only-new-issues: true
    - id: get-check-flag
      if: always()
      shell: bash
      run: |
        commentLog="./golangci-lint-report.xml"
        errNum=$(egrep "[[:space:]]+<error .*message=" ${commentLog} | wc -l || true)
        if [ "$errNum" -gt "0" ];then
            echo "golangci-lint检查失败"
            echo "isFailed=true" >> $GITHUB_OUTPUT
        fi
        echo "errNum=${errNum}" >> $GITHUB_OUTPUT